{"version":3,"sources":["components/InputFields.tsx","components/Charts.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputFieldStyle","styled","div","InputFields","props","useState","nrCharts","setnrCharts","dataPoints","setdataPoints","onSubmit","event","declareFormData","parseInt","preventDefault","type","id","name","placeholder","min","max","required","onChange","e","target","value","LineStyle","ChartsStyle","setData","chartData","labels","datasets","label","data","lineTension","fill","backgroundColor","borderColor","setOptions","title","display","text","fontSize","scales","yAxes","ticks","legend","LineChart","options","Charts","len","chartsData","length","Array","keys","map","x","i","AppStyle","App","formData","setFormData","j","push","Math","ceil","random","setChartsData","console","log","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c764a980.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst InputFieldStyle = styled.div`\n  margin-top: 22vh;\n\n  input {\n    padding: 15px;\n    width: 270px;\n    font-size: 20px;\n  }\n\n  button {\n    padding: 25px;\n    background-color: #f4511e;\n    border: none;\n    color: white;\n    padding: 16px 32px;\n    text-align: center;\n    font-size: 20px;\n    margin: 4px 2px;\n    opacity: 0.6;\n    transition: 0.3s;\n    display: inline-block;\n    text-decoration: none;\n    cursor: pointer;\n  }\n`;\n\ntype InputFieldsProps = {\n  declareFormData: any;\n};\n\nconst InputFields = (props: InputFieldsProps) => {\n  const [nrCharts, setnrCharts] = useState<string>(\"\");\n  const [dataPoints, setdataPoints] = useState<string>(\"\");\n\n  const handleSubmit = (event: React.SyntheticEvent): void => {\n    props.declareFormData({\n      nrCharts: parseInt(nrCharts),\n      dataPoints: parseInt(dataPoints),\n    });\n\n    setnrCharts(\"\");\n    setdataPoints(\"\");\n    event.preventDefault();\n  };\n\n  return (\n    <InputFieldStyle>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"number\"\n          id=\"nr-charts\"\n          name=\"nr-charts\"\n          placeholder=\"Insert number of charts\"\n          min=\"1\"\n          max=\"10\"\n          required\n          onChange={(e) => setnrCharts(e.target.value)}\n          value={nrCharts}\n        ></input>\n        <input\n          type=\"number\"\n          id=\"nr-data-points\"\n          placeholder=\"Insert number of data points\"\n          min=\"1\"\n          max=\"200\"\n          required\n          value={dataPoints}\n          onChange={(e) => setdataPoints(e.target.value)}\n        ></input>\n        <button type=\"submit\">Generate Charts</button>\n      </form>\n    </InputFieldStyle>\n  );\n};\n\nexport default InputFields;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport styled from \"styled-components\";\n\nconst LineStyle = styled.div`\n  background: white;\n  margin: 20px auto;\n  max-width: 1000px;\n  align: center;\n`;\n\nconst ChartsStyle = styled.div`\n  margin: 20px 10px 0 10px;\n`;\n\ninterface PropsCharts {\n  chartsData: Array<Array<number>>;\n}\n\ninterface LineChartProps {\n  name: string;\n  chartData: Array<number>;\n  labels: Array<number>;\n}\n\nconst setData = (chartData: Array<number>, labels: Array<number>) => ({\n  labels,\n  datasets: [\n    {\n      label: \"chart\",\n      data: chartData,\n      lineTension: 0,\n      fill: false,\n      backgroundColor: \"rgb(255, 99, 132)\",\n      borderColor: \"rgba(255, 99, 132, 0.2)\",\n    },\n  ],\n});\n\nconst setOptions = (name: string) => ({\n  title: {\n    display: true,\n    text: name,\n    fontSize: 20,\n  },\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          min: 0,\n          max: 100,\n        },\n      },\n    ],\n  },\n  legend: {\n    display: false,\n  },\n});\n\nconst LineChart = ({ name, chartData, labels }: LineChartProps) => (\n  <>\n    <LineStyle>\n      <Line data={setData(chartData, labels)} options={setOptions(name)} />\n    </LineStyle>\n  </>\n);\n\nconst Charts = (props: PropsCharts) => {\n  const len = props.chartsData[0].length;\n  const labels = [...Array(len).keys()].map((x) => x + 1);\n\n  return (\n    <>\n      <ChartsStyle>\n        {props.chartsData.map((chartData: Array<number>, i: number) => (\n          <div key={i}>\n            <LineChart\n              name={`Chart - ${i + 1}`}\n              chartData={chartData}\n              labels={labels}\n            />\n          </div>\n        ))}\n      </ChartsStyle>\n    </>\n  );\n};\n\nexport default Charts;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport InputFields from \"./InputFields\";\nimport Charts from \"./Charts\";\n\nconst AppStyle = styled.div`\n  text-align: center;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n`;\n\ninterface FormData {\n  nrCharts: number;\n  dataPoints: number;\n}\n\nconst setChartsData = (data: FormData) => {\n  let chartsData = [];\n\n  for (let i = 0; i < data.nrCharts; i++) {\n    let chartData = [];\n    for (let j = 0; j < data.dataPoints; j++) {\n      chartData.push(Math.ceil(Math.random() * 100));\n    }\n    chartsData.push(chartData);\n  }\n\n  return chartsData;\n};\n\nconst App = () => {\n  const [formData, setFormData] = useState<FormData>();\n  let chartsData;\n\n  if (formData) {\n    chartsData = setChartsData(formData);\n\n    console.log(\"SET_APP_DATA\", chartsData);\n  }\n\n  return (\n    <React.Fragment>\n      <AppStyle>\n        <InputFields declareFormData={setFormData} />\n        {chartsData && <Charts chartsData={chartsData} />}\n      </AppStyle>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <header>\n      <h1>Charts Generator</h1>\n    </header>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}